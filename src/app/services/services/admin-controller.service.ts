/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AuthResponse } from '../models/auth-response';
import { findAll2 } from '../fn/admin-controller/find-all-2';
import { FindAll2$Params } from '../fn/admin-controller/find-all-2';
import { register3 } from '../fn/admin-controller/register-3';
import { Register3$Params } from '../fn/admin-controller/register-3';
import { saveProfile } from '../fn/admin-controller/save-profile';
import { SaveProfile$Params } from '../fn/admin-controller/save-profile';
import { UserDto } from '../models/user-dto';

@Injectable({ providedIn: 'root' })
export class AdminControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `saveProfile()` */
  static readonly SaveProfilePath = '/api/v1/admin/save';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `saveProfile()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  saveProfile$Response(params?: SaveProfile$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return saveProfile(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `saveProfile$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  saveProfile(params?: SaveProfile$Params, context?: HttpContext): Observable<{
}> {
    return this.saveProfile$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `register3()` */
  static readonly Register3Path = '/api/v1/admin/register';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `register3()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  register3$Response(params: Register3$Params, context?: HttpContext): Observable<StrictHttpResponse<AuthResponse>> {
    return register3(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `register3$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  register3(params: Register3$Params, context?: HttpContext): Observable<AuthResponse> {
    return this.register3$Response(params, context).pipe(
      map((r: StrictHttpResponse<AuthResponse>): AuthResponse => r.body)
    );
  }

  /** Path part for operation `findAll2()` */
  static readonly FindAll2Path = '/api/v1/admin/find-all';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAll2()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAll2$Response(params?: FindAll2$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UserDto>>> {
    return findAll2(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAll2$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAll2(params?: FindAll2$Params, context?: HttpContext): Observable<Array<UserDto>> {
    return this.findAll2$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<UserDto>>): Array<UserDto> => r.body)
    );
  }

}
